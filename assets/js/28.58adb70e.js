(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{397:function(t,s,a){"use strict";a.r(s);var n=a(5),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("之前在"),s("a",{attrs:{href:"https://fallenaangel.github.io/blogs/pages/584c80fa51b8926ead4e00b273c3c3c8/",target:"_blank",rel:"noopener noreferrer"}},[t._v("实现一个简易版React"),s("OutboundLink")],1),t._v("中介绍了React16旧版本架构的实现原理，在React 16.8更新之后，有了一个新的内部架构，在本文中, 我们将重写-didact-系列中的大部分代码, 以遵循 React-16 新架构. 我们将尝试从React代码库中 模拟 它的结构, 变量和函数名称。参考自"),s("a",{attrs:{href:"https://github.com/chinanf-boy/didact-explain/blob/master/5.Fibre.readme.md#52-%E8%B0%83%E5%BA%A6%E5%BE%AE%E4%BB%BB%E5%8A%A1",target:"_blank",rel:"noopener noreferrer"}},[t._v("github Fibre"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"为什么选择fibre"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么选择fibre"}},[t._v("#")]),t._v(" 为什么选择Fibre")]),t._v(" "),s("p",[t._v("当浏览器的主线程长时间忙于运行时, 关键的简短任务必须等待一段不可接受的时间,才能完成。")]),t._v(" "),s("p",[t._v("是什么让主线程如此繁忙, 以至于无法将一些 ms, 花费在保持动画平滑和UI响应上呢？还记得"),s("a",{attrs:{href:"https://fallenaangel.github.io/blogs/pages/584c80fa51b8926ead4e00b273c3c3c8/#%E5%AE%9E%E4%BE%8B-%E5%AF%B9%E6%AF%94%E5%92%8C%E8%99%9A%E6%8B%9Fdom",target:"_blank",rel:"noopener noreferrer"}},[t._v("实现一个简易版React"),s("OutboundLink")],1),t._v("吗？一旦开始对比虚拟DOM, 它就不会停止，如果主线程需要做其他任何事情, 它将不得不等待. 而且, 因为很大程度上它取决于递归调用, 所以很难使它停止再继续. 这就是为什么我们要用一个新的数据结构来重写它, 我们将使用"),s("strong",[t._v("循环")]),t._v("替换递归调用.")]),t._v(" "),s("h3",{attrs:{id:"理解fibre"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解fibre"}},[t._v("#")]),t._v(" 理解Fibre")]),t._v(" "),s("p",[t._v("查看此"),s("a",{attrs:{href:"https://koba04.github.io/react-fiber-resources/examples/",target:"_blank",rel:"noopener noreferrer"}},[t._v("demo"),s("OutboundLink")],1),t._v("理解"),s("strong",[t._v("react-fibre")]),t._v("。可以看到 Async mode 的卡顿, 因为它这个组件元素被分配的优先级低, 而sync mode的优先级比 Async mode 高, Async mode要为优先级高的让道. 比如优先级高的动画。")]),t._v(" "),s("h3",{attrs:{id:"调度微任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调度微任务"}},[t._v("#")]),t._v(" 调度微任务")]),t._v(" "),s("p",[t._v("我们需要将工作分解为更小的部分, 可以短时间运行这些部分, 让主线程执行更高优先级的任务, 并且如果有"),s("strong",[t._v("任何待处理的事情")]),t._v("再回来完成工作。")]),t._v(" "),s("p",[t._v("我们会在"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback",target:"_blank",rel:"noopener noreferrer"}},[t._v("requestIdleCallback()"),s("OutboundLink")],1),t._v("函数的帮助下,做到这一点。可以参考另外一篇介绍它的文章"),s("a",{attrs:{href:"https://fallenaangel.github.io/blogs/pages/89453a22dbfd259f1041805b1c340455/",target:"_blank",rel:"noopener noreferrer"}},[t._v("后台任务协作调度API"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("在本文demo中，它将下一次浏览器空闲时，调用我们的preformWork回调函数, 并加入一个deadline参数, 用于描述我们的代码可用时间:")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENOUGH_TIME")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 毫秒")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" workQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nextUnitOfWork "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 全局变量, 那么一次只能走一个回调")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("schedule")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("task")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 加")]),t._v("\n  workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("task"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 存好了")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestIdleCallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("performWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 下一次空闲运行, performWork 函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("performWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("deadline")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 空闲机会来了")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("nextUnitOfWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果当前没有可运行的回调，从队列里面取一个出来")]),t._v("\n    nextUnitOfWork "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 拿出来,")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一回调 与 看看有没有 足够的时间 再走一趟 ")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextUnitOfWork "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" deadline"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeRemaining")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ENOUGH_TIME")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5. DO something")]),t._v("\n    nextUnitOfWork "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextUnitOfWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextUnitOfWork "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" workQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6. 如果还没有搞定, 那么 再等空闲咯")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestIdleCallback")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("performWork"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br")])]),s("h2",{attrs:{id:"fibre数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fibre数据结构"}},[t._v("#")]),t._v(" Fibre数据结构")]),t._v(" "),s("p",[t._v("这是一个普通的旧JavaScript对象，我们将使用parent, child和sibling属性打造的Fibre树来描述组件的树。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fiber "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("tag")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HOST_COMPONENT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"div"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是html元素的标签:string.")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("parent")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" parentFiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("child")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" childFiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("sibling")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("alternate")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" currentFiber"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("stateNode")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"div"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是对Component实例的引用，它可以是DOM元素, 也可以是用户定义的Component-class的实例。")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("props")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("children")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("className")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是元素的属性和事件监听器")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("partialState")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("effectTag")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PLACEMENT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("effects")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://fallenaAngel.github.io/picx-images-hosting/web-fe/react/fibre-1.8ojixwmzv7.webp",alt:"Fibre-1"}})]),t._v(" "),s("ul",[s("li",[t._v("b, p和 i 在 Fibre 表示 host components，使用"),s("code",[t._v("tag: HOST_COMPONENT")]),t._v("来标识。")]),t._v(" "),s("li",[t._v("例子中的 "),s("code",[t._v("<Foo>")]),t._v(" 在 Fibre 中 表示 class component，它的tag是"),s("code",[t._v("CLASS_COMPONENT")]),t._v("和type来自用户定义的Didact.Component.")]),t._v(" "),s("li",[t._v("div 代表Fibre的host root. 它与 host component 相似, 因为它有DOM元素可以作为stateNode, 但作为树的根, 它会得到特殊处理. Fibre.tag会是"),s("code",[t._v("HOST_ROOT")]),t._v("， 请注意, Fibre.stateNode是传递给Didact.render()的DOM节点.")]),t._v(" "),s("li",[t._v("另一个重要的属性是alternate. 我们需要它, 因为大多数时候我们会有两棵Fibre树.\n"),s("ul",[s("li",[t._v("一棵树将对应于我们已经呈现给html DOM的东西, 我们将它称为当前树或旧树.")]),t._v(" "),s("li",[t._v("另一棵是我们在创建新更新（调用setState()或 Didact.render() 时构建的树, 我们将此树称为正在进行中的树, 简称为工作树。")])])])]),t._v(" "),s("p",[t._v("工作树不会与旧树共享任何Fibre. 一旦我们完成-工作树-的工作建设,并取得所需的 DOM变化, 工作树会成为旧树.\n因此, 我们使用alternate链接 正在进行中的Fiber与 相应旧树的Fiber. Fibre和它的alternate分享相同tag、type与stateNode。有时，当我们渲染新的东西时,Fibre不会有alternate.")]),t._v(" "),s("ul",[s("li",[t._v("最后, 我们有effects列表和effectTag. 当我们发现工作树的Fibre有需要改变的DOM, 我们将设置effectTag为PLACEMENT, UPDATE或DELETION. 为了更容易将所有DOM变化一起提交, 我们保留了所有Fibre（来自Fibre子树）的effectTag项到列表effects.")])]),t._v(" "),s("h2",{attrs:{id:"didact调用层次结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#didact调用层次结构"}},[t._v("#")]),t._v(" Didact调用层次结构")]),t._v(" "),s("p",[t._v("要了解我们要编写的代码的流程, 请查看此图表:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://fallenaAngel.github.io/picx-images-hosting/web-fe/react/fibre-2.45hhuxhixg.webp",alt:"Fibre-2"}})]),t._v(" "),s("p",[t._v("每次空闲时间，都去队列找出来一个回调执行，我们使用ENOUGH_TIME（1ms常数, 与React相同）来检查deadline.timeRemaining(),是否有足够运行另一个工作单元的时间. 如果performUnitOfWork()超过这一时间, 我们将留待下次继续. performUnitOfWork()将用"),s("strong",[t._v("正在进行的更新")]),t._v("和找出我们需要"),s("strong",[t._v("对DOM应用哪些更改")]),t._v("来构建工作树. 这将逐步完成, 每次处理一段Fibre数据，直到完成。")]),t._v(" "),s("h2",{attrs:{id:"实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://codepen.io/pomber/pen/veVOdd",target:"_blank",rel:"noopener noreferrer"}},[t._v("codePen.io"),s("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);